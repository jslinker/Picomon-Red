pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
function _init()
    cam = {
        x = 0,
        y = 0
    }

    player = {
        x = 6,
        y = 12,
        offsetX = 0,
        offsetY = 0,
        targetX = 6,
        targetY = 12,
        animationFrame = "up",
        animations = {},
        shouldCheckDoors = false
    }

    rooms = {
        -- 1. Upstairs Red's House
        {
            x = 0,
            y = 0,
            maxX = 15,
            maxY = 15,
            doors = {
                {
                    x = 14,
                    y = 2,
                    roomNumber = 2,
                    destination = {
                        x = 14,
                        y = 18
                    }
                }
            },
            bottomExitDoors = {}
        },
        -- 2. Red's House
        {
            x = 0,
            y = 16,
            maxX = 15,
            maxY = 31,
            doors = {
                {
                    x = 14,
                    y = 18,
                    roomNumber = 1,
                    destination = {
                        x = 14,
                        y = 2
                    }
                },
                {
                    x = 4,
                    y = 32,
                    roomNumber = 3,
                    destination = {
                        x = 62,
                        y = 10
                    }
                },
                {
                    x = 6,
                    y = 32,
                    roomNumber = 3,
                    destination = {
                        x = 62,
                        y = 10
                    }
                }
            },
            bottomExitDoors = {
                -- technically (5, 31), (5, 32) should be included, but it's not actually necessary if you never step left and right in the open door way
                {x = 4, y = 31},
                {x = 4, y = 32},
                {x = 6, y = 31},
                {x = 6, y = 32}
            }
        },
        -- 3. Pallet Twon
        {
            x = 52,
            y = 0,
            maxX = 91,
            maxY = 31,
            doors = {
                { -- Red's House
                    x = 62,
                    y = 8,
                    roomNumber = 2,
                    destination = {
                        x = 4,
                        y = 30
                    }
                },
                { -- Blue's House
                    x = 78,
                    y = 8,
                    roomNumber = 4,
                    destination = {
                        x = 20,
                        y = 14
                    }
                },
                { -- The Lab
                    x = 76,
                    y = 20,
                    roomNumber = 5,
                    destination = {
                        x = 40,
                        y = 22
                    }
                },
            },
            bottomExitDoors = {}
        },
        -- 4. Blue's House
        {
            x = 16,
            y = 0,
            maxX = 31,
            maxY = 15,
            doors = {
                {
                    x = 20,
                    y = 16,
                    roomNumber = 3,
                    destination = {
                        x = 78,
                        y = 10
                    }
                },
                {
                    x = 22,
                    y = 16,
                    roomNumber = 3,
                    destination = {
                        x = 78,
                        y = 10
                    }
                }
            },
            bottomExitDoors = {
                {x = 20, y = 16},
                {x = 20, y = 15},
                {x = 22, y = 16},
                {x = 22, y = 15}
            }
        },
        -- The Lab
        {
            x = 32,
            y = 0,
            maxX = 51,
            maxY = 23,
            doors = {
                {
                    x = 40,
                    y = 24,
                    roomNumber = 3,
                    destination = {
                        x = 76,
                        y = 22
                    }
                },
                {
                    x = 42,
                    y = 24,
                    roomNumber = 3,
                    destination = {
                        x = 76,
                        y = 22
                    }
                }
            },
            bottomExitDoors = {
                {x = 40, y = 24},
                {x = 40, y = 23},
                {x = 42, y = 24},
                {x = 42, y = 23}
            }
        },
    }

    room = rooms[1]

    messages = {
        {
            x = 0,
            y = 2,
            lines = {
                "RED turned on\nthe PC."
            }
        },
        {
            x = 6,
            y = 10,
            lines = {
                "RED is\nplaying the SNES!",
                "... Okay!",
                "It's time to go!"
            }
        },
        {
            x = 6,
            y = 18,
            lines = {
                "There's a movie\non TV Four boys",
                "are walking on\nrailroad tracks.",
                "I better go too."
            }
        },
        {
            x = 2,
            y = 18,
            lines = {
                "Crammed full of\nPokemon books!",
            }
        },
        {
            x = 0,
            y = 18,
            lines = {
                "Crammed full of\nPokemon books!",
            }
        },
    }

    activeMessage = nil

    blink = 0

    activeTransition = nil

end


-- Update Functions

function _update()
    if activeTransition != nil then
        return
    end

    if activeMessage != nil then
        receiveMessageInput()
    elseif (not runAnimations()) then
        receiveInput()
    end
end

function receiveInput()
    if (btn(0)) then
        tryMove(-1, 0, "left")
    elseif (btn(1)) then
        tryMove(1, 0, "right")
    elseif (btn(2)) then
        tryMove(0, -1, "up")
    elseif (btn(3)) then
        tryMove(0, 1, "down")
    elseif (btnp(4)) then
        printh("Z")
    elseif (btnp(5)) then
        inspect()
    end
end

function receiveMessageInput()
    -- Keeping separate because in the real game one button scrolls text faster, I might decide to build that
    if (btnp(4)) then
        nextMessage()
    elseif (btnp(5)) then
        nextMessage()
    end
end

function tryMove(x, y, frame)
    player.animationFrame = frame
    
    local newX = player.x + x
    local newY = player.y + y
    if not isInRoom(newX, newY, room) or not isPassable(newX, newY) then
        return
    end

    newX = player.x + (x * 2)
    newY = player.y + (y * 2)
    if not isInRoom(newX, newY, room) or not isPassable(newX, newY) then
        return
    end

    -- Build the list of animation frames to draw
    player.animations = {}
    for i in all({2,4}) do
        add(player.animations, {animationFrame=frame, x=x * i, y=y * i})
    end

    for i in all({6,8,10,12}) do
        add(player.animations, {animationFrame="step_"..frame, x=x * i, y=y * i})
    end
    add(player.animations, {animationFrame=frame, x=x * 14, y=y * 14})

    -- Set the end location after the animations are over
    player.targetX = newX
    player.targetY = newY
end

function runAnimations()
    if (#player.animations == 0) then
        player.x = player.targetX
        player.y = player.targetY
        player.offsetX = 0
        player.offsetY = 0
        if player.shouldCheckDoors then
            player.shouldCheckDoors = false
            checkDoors()
        end
        return false
    end

    local firstFrame = removeFirst(player.animations)
    player.animationFrame = firstFrame.animationFrame
    player.offsetX = firstFrame.x
    player.offsetY = firstFrame.y

    if #player.animations == 0 then
        player.shouldCheckDoors = true
    end

    return true
end

function checkDoors()
    for door in all(room.doors) do
        if door.x == player.x and door.y == player.y then
            fadeOutIn(door.destination.x, door.destination.y, rooms[door.roomNumber])
            return
        end
    end
end

function nextMessage()
    if #activeMessage.lines != 0 then
        removeFirst(activeMessage.lines)
    end

    if #activeMessage.lines == 0 then
        activeMessage = nil
    end
end

function inspect()
    if player.animationFrame == "up" then
        inspectAt(player.x, player.y - 2)
    elseif player.animationFrame == "down" then
        inspectAt(player.x, player.y + 2)
    elseif player.animationFrame == "left" then
        inspectAt(player.x - 2, player.y)
    elseif player.animationFrame == "right" then
        inspectAt(player.x + 2, player.y)
    end
end

function inspectAt(x, y)
    for message in all(messages) do
        if message.x == x and message.y == y then
            activeMessage = deepcopy(message)
        end
    end
end

function isInRoom(x, y, room)
    -- Some rooms have exit doors on the bottom that are "outside the room"
    for door in all(room.bottomExitDoors) do
        if door.x == x and door.y == y then
            return true
        end
    end

    return x >= room.x and x < room.maxX and y >= room.y and y < room.maxY
end

function isPassable(x, y)
    -- Some rooms have exit doors on the bottom that are "outside the room"
    for door in all(room.bottomExitDoors) do
        if door.x == x and door.y == y then
            return true
        end
    end

    return not fget(mget(x, y), 0)
end

-- Transitions

function fadeOutIn(x, y, room)
    activeTransition = {
        type = "fadeOutIn",
        duration = 0,
        step = 1,
        x = x,
        y = y,
        room = room
    }
end

-- Draw Functions

function _draw()
    cls()
    moveCamera()
    drawRoom()
    drawPlayer()
    drawMessage()
    drawScreenEffect()
end

function drawRoom()
    map(room.x, room.y, room.x * 8, room.y * 8, room.maxX - room.x + 1, room.maxY - room.y + 1)
end

function drawPlayer()
    drawPlayerAt(player.x * 8 + player.offsetX, player.y * 8 + player.offsetY)
end

function drawPlayerAt(drawX, drawY)
    local x = drawX
    local y = drawY -- Bounding box
    local spriteY = y - 4 -- Player sprite

    -- Animations are 15 frames
    -- stand 6 frames, step 8 frames, first frame of next animation

    if player.animationFrame == "up" then
        spr(4, x, spriteY, 1, 2, false, false)
        spr(4, x + 8, spriteY, 1, 2, true, false)
    elseif player.animationFrame == "down" then
        spr(1, x, spriteY, 1, 2, false, false)
        spr(1, x + 8, spriteY, 1, 2, true, false)
    elseif player.animationFrame == "left" then
        spr(7, x, spriteY, 2, 2, false, false)
    elseif player.animationFrame == "right" then
        spr(7, x, spriteY, 2, 2, true, false)
    elseif player.animationFrame == "step_right" then
        spr(9, x, spriteY, 2, 2, true, false)
    elseif player.animationFrame == "step_left" then
        spr(9, x, spriteY, 2, 2, false, false)
    elseif player.animationFrame == "step_up" then
        spr(5, x, spriteY, 2, 2, false, false)
    elseif player.animationFrame == "step_down" then
        spr(2, x, spriteY, 2, 2, false, false)
    end
end

function drawMessage()
    if activeMessage == nil then
        return
    end
    camera(0, 0)
    rectfill(0, 80, 128, 128, 7)
    spr(203, 0, 80, 1, 1, false, false)
    spr(219, 0, 120, 1, 1, false, false)
    spr(204, 120, 80, 1, 1, false, false)
    spr(220, 120, 120, 1, 1, false, false)
    -- Top Line
    rectfill(8, 82, 120, 85, 1)
    rectfill(8, 83, 120, 83, 7)
    -- Bottom Line
    rectfill(8, 122, 120, 125, 1)
    rectfill(8, 123, 120, 123, 7)
    -- Left Line
    rectfill(2, 88, 4, 120, 1)
    rectfill(3, 88, 3, 120, 7)
    -- Right Line
    rectfill(122, 88, 124, 120, 1)
    rectfill(123, 88, 123, 120, 7)
    -- Text
    print(activeMessage.lines[1], 8, 96, 1)
    -- Arrow
    if blink < 16 then
        spr(205, 112, 112, 1, 1, false, false)
    elseif blink >= 32 then
        blink = 0
    end
    blink = blink + 1
end

function drawScreenEffect()
    if activeTransition == nil then
        return
    end

    if activeTransition.type == "fadeOutIn" then
        activeTransition.duration = activeTransition.duration + activeTransition.step
        fadeToBlack(activeTransition.duration)
        -- When completely black, switch the fade direction and move the character to their new destination
        if activeTransition.duration >= 16 and activeTransition.step > 0 then
            activeTransition.step = activeTransition.step * -1
            player.x = activeTransition.x
            player.y = activeTransition.y
            player.targetX = player.x
            player.targetY = player.y
            room = activeTransition.room
        elseif activeTransition.duration <= 0 and activeTransition.step < 0 then
            activeTransition = nil
        end
    end
end

function moveCamera()
    cam.x = player.x * 8 - 48 + player.offsetX -- max(0,min(player.x - 56, 897))
    cam.y = player.y * 8 - 48 + player.offsetY-- max(0,min(player.y - 56,385))
    camera(cam.x, cam.y)
end

-- Fade Effects

local fadetable0={
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},
    {2,2,2,2,2,2,1,1,1,0,0,0,0,0,0},
    {3,3,3,3,3,3,1,1,1,0,0,0,0,0,0},
    {4,4,4,2,2,2,2,2,1,1,0,0,0,0,0},
    {5,5,5,5,5,1,1,1,1,1,0,0,0,0,0},
    {6,6,13,13,13,13,5,5,5,5,1,1,1,0,0},
    {7,6,6,6,6,13,13,13,5,5,5,1,1,0,0},
    {8,8,8,8,2,2,2,2,2,2,0,0,0,0,0},
    {9,9,9,4,4,4,4,4,4,5,5,0,0,0,0},
    {10,10,9,9,9,4,4,4,5,5,5,5,0,0,0},
    {11,11,11,3,3,3,3,3,3,3,0,0,0,0,0},
    {12,12,12,12,12,3,3,1,1,1,1,1,1,0,0},
    {13,13,13,5,5,5,5,1,1,1,1,1,0,0,0},
    {14,14,14,13,4,4,2,2,2,2,2,1,1,0,0},
    {15,15,6,13,13,13,5,5,5,5,5,1,1,0,0}
}

function fadeToBlack(i)
    for c=0,15 do
        if flr(i+1)>=16 then
            pal(c,0)
        else
            pal(c,fadetable0[c+1][flr(i+1)])
        end
    end
end

-- fade to white

local fadetable1={
{0,0,1,1,5,5,5,13,13,13,6,6,6,6,7},
{1,1,5,5,13,13,13,13,13,6,6,6,6,6,7},
{2,2,2,13,13,13,13,13,6,6,6,6,6,7,7},
{3,3,3,3,13,13,13,13,6,6,6,6,6,7,7},
{4,4,4,4,4,14,14,14,15,15,15,15,15,7,7},
{5,5,13,13,13,13,13,6,6,6,6,6,6,7,7},
{6,6,6,6,6,6,6,6,7,7,7,7,7,7,7},
{7,7,7,7,7,7,7,7,7,7,7,7,7,7,7},
{8,8,8,8,14,14,14,14,14,14,15,15,15,7,7},
{9,9,9,10,10,10,15,15,15,15,15,15,15,7,7},
{10,10,10,10,10,15,15,15,15,15,15,15,7,7,7},
{11,11,11,11,11,11,6,6,6,6,6,6,6,7,7},
{12,12,12,12,12,12,6,6,6,6,6,6,7,7,7},
{13,13,13,13,6,6,6,6,6,6,6,6,7,7,7},
{14,14,14,14,14,15,15,15,15,15,15,7,7,7,7},
{15,15,15,15,15,15,15,7,7,7,7,7,7,7,7}
}

function fadeToWhite(i)
    for c=0,15 do
    if flr(i+1)>=16 then
    pal(c,7)
    else
        pal(c,fadetable1[c+1][flr(i+1)])
        end
    end
end

-- Utility Functions

function prints(any)
    printh(tostring(any))
end

function removeFirst(table)
    return del(table, table[1])
end

function tostring(any)
    if type(any)=="function" then 
        return "function" 
    end
    if any==nil then 
        return "nil" 
    end
    if type(any)=="string" then
        return any
    end
    if type(any)=="boolean" then
        if any then return "true" end
        return "false"
    end
    if type(any)=="table" then
        local str = "{ "
        for k,v in pairs(any) do
            str=str..tostring(k).."->"..tostring(v).." "
        end
        return str.."}"
    end
    if type(any)=="number" then
        return ""..any
    end
    return "unkown" -- should never show
end

function deepcopy(obj)
    if type(obj) ~= 'table' then return obj end
    local res = {}
    for k, v in pairs(obj) do res[deepcopy(k)] = deepcopy(v) end
    return res
end

__gfx__
00000000000001110000000000000000000001110000000000000000000001111110000000000000000000000000000000000000000000000000000000000000
00000000000015550000011111100000000015550000011111100000000015555551000000000111111000000000000000000000000000000000000000000000
00700700000155550000155555510000000155550000155555510000000155555555100000001555555100000000000000000000000000000000000000000000
00077000000155550001555555551000000155550001555555551000001175555555100000015555555510000000000000000000000000000000000000000000
00077000001115770001555555551000001155550011555555551000017777555551110000117555555510000000000000000000000000000000000000000000
00700700001171110011157777511100001115550011555555551100001155511111110001777755555111000000000000000000000000000000000000000000
00000000017177770011111111111100017111110171155555511710000171771111110000115551111111000000000000000000000000000000000000000000
00000000017777170171777777771710017711110177111111117710000171771771100000017177111111000000000000000000000000000000000000000000
00000000001177170177771771777710001177110111771111771100000177777771000000017177177110000000000000000000000000000000000000000000
00000000001117750111771771771100001111550171115555111100000015777115100000017777777100000000000000000000000000000000000000000000
00000000017711110171177557715100017115110011151111517710000001111155100000001577711510000000000000000000000000000000000000000000
00000000017711110011111111117100017115570001155775517710000000117715100000000111111510000000000000000000000000000000000000000000
00000000001115510001151111771100001111550001155555111100000000117715100000011111177110000000000000000000000000000000000000000000
00000000000151150000111551771000000151110000111111000000000001551111000000155155177151000000000000000000000000000000000000000000
00000000000155510000155110110000000155510000151100000000000001555510000000015511111551000000000000000000000000000000000000000000
00000000000011100000011100000000000011100000011100000000000000111100000000001110000110000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77177777777771771111111111111111666111111111166666666666666666666666666666666666677777776666666666666666666666666666666666666666
71611777777116171766666666666671551777777777715555555555555555555555555555555555767777776666666655555555555555555111111111111115
71166117711665111766666666666671551777777777715555555555555555555555555555555555776777776666666655555555555555555151777777771515
16666161161655511111111111111111551777777777715555555555555555555555555555555555777677775555555555555555555555555111111111111115
71166661565551151555555555555551661666666666616666666666666666666666666666666666776767776666666666606666666666666151777777771516
16666666155166611555111111115551551611111111615555555555555555555555555555555555767776776666666655555555555555555111111111111115
71166111116651171111677777761111111617511111611155555555555555555555555555555555677777676666666655555555555555555151777777771515
11111661155117771165666666665611171611111111615155555555555555555555555555555555777777765555555555555555555555555111111111111115
71166556615661171677777777777761171611111111615171111111111111111111111611111117677777776777777766666666666666666151777777771516
16515556555516611677777777777761171611111111615117777777777777777777777177777771767777777677777755555555555555555111111111111115
71665616156555151677777777777761171666666666615117666666666666666666665166666651776777777767777755555555555555555151777777771515
16655651156565611677777777777761171555551111515117666666666666666666665166666651777607777776077755555555555555555111111111111115
11651511115165111677777777777761171666666666615117666666666666666666665166666651776767777767677766606666666066666666666666666666
16611611116116611677777777777761171555555555516117666666666666666666665166666651767776777677767755555555555555555555555555555555
71617171111716171677777777777761177111111111166117666666666666666666665166666651677777676777776755555555555555555555555555555555
77177771711771171677777777777761177777777777777117666666666666666666665166666651777777767777777655555555555555555555555555555555
77777771517777771677777777777761155111111111155117666666666666666111111166666651771111111111117767777777677777771155555555555555
77777777617777771677777777777761111757575757711117666666666666661777777766666651717666666666661776111111167777771155555555555111
77777715517777771677777777777761171655555555715117666666666666661766666666666651711111111111111771577777516777771155555555511661
77771116611177771677777777777761171757577775715117666666666666661766666666666651176666666666666171565556516677771155555551166611
77715157651517771677777777777761171666666666615117666666666666661766666666666651176666666666666171511111516767771111111116661611
77771165561177771677777777777761151111111111115117666666666666661766666666666651155555555555555171777777716776771111111666161111
77161157651161771677777777777761155555555555555117666666666666661766666666666651151111111111115161756665716777671111166616115551
77161115511161771677777777777761611111111111111611555555555555551766666655555511151666655555515171777777716777761116661111115551
77156111111651771111111111111111151111111111115111111111111111111111111111111111151677655555515161777777616711771666161155515551
77155666666551771766666666666671156666611666665115555555555555555555555155555551151666655555515176111111166177176611111166515551
77715576555517771766666666666671156666611666665171111111111111111111111611111117151555555555515177616666661757511611555166515551
77715111111517771111111111111111156666611666665171555155555555555515551655155517151555555555515177717771117777711111665166515551
77715566555517771555555555555551156666611666665171766111111111111116661611166617151555555555515177671117175571171551665166515111
77771576555177771555555555555551111111111111111171766166666666665516661655166617151111111111115176777677175516771551665166511151
77777111111777771555555555555551156666666666665171111166666666665551116655111117155515555551555167777767617717671551665161116151
77777777777777771111111111111111611111111111111677777777777777776666666677777777511111111111111577777776771177761551555151516151
77777777777771117111111111111117666666667777777766666666666666666666666666666666555555555111111111111115711111111111111715555551
77777777777111711777777777777771666666667777777751111111111111155111111111111115777777777155666666665517715517777715511161555516
77777777711171711766666666666651666666667777777751777771177777155177777777777715777777777117777777777117771177777771165156155165
77777771117111111766666666666651666666667777777751777771177777155175555555555715777777777717575575757177711111111111115155611655
77777111717177711766666666666651666666667777777761777771177777166175665555555716777777777717777775757177166666666666661115111615
77711171111177711766666666666651666666667777777751777771177777155175665555555715777777777717557575777177175777777755771151166151
66616161777177711766666666666651666666667777777751777771177777155175555566555715777777777717575575557177175575755755751111615115
66611111777171111766666666666651666666667777777751777771177777155175555666655715777777777717777775777177177777777777771116151551
55517771777111711555555555555551176666666666665161777771177777166175556666665716767676767617555575577176175577777757571116555511
11117771711171711511111111111151176666666666665151777771177777155175666666665715676767676717757777557167175575755757571151655116
15517771117111111516161616616151176666666666665151666661166666155175555555555715767676767617575557757176177777777777771155161161
15517111717155511516171716616151176666666666665151111111111111155177777777777715676767676117777777777117711111111111115155511615
15511171111155511517171717717151176666666666665166666666666666666111111111111116666666666155555555555516767677767665175155511651
15517171555555511517161617717151176666666666665155555555555555555555555555555555666666666111111111111116767677676655165155166115
15511111555555511511161611111151176666666666665155555555555555555555555555555555666666666666666666666666777777767655155151651515
11111111111111111511111111111151176666666666665155555555555555555555555555555555111111111111111111111111777777776766511516555151
67777777677777771566666666666651111111111111111177777777666666666767676677777777555775557777771111177777777777776775577611515601
76777777767777771511111111111151777777777777777756565656555555557677767676767777557755557777115666511777771111777757756771156016
77677777776777771516616166166151666666666666666655555555777777776777666776767676557755557771567777765177711111177575565617110165
77767777777677771516617177177151666666666666666666666666555555557676667677777676555775557715777777777517711111177576665751711656
77676777776767771517717177177151666666666666666655555555555555556766676777777777555577757716777777777617711111176656657615711565
76711111111116771511116111111151666666666116666656655555555555557676776677676777755555577715667777766517716115175575575551177156
67177777777771671511111111111151666666661771166656655555555555557767766777676777577555557715656666656517716655177555555761515715
77177666666771761566666666666651666666667557716655555555555555557666667677777777557755557615655777556517716655176765567615156571
67177666666771771511111111111151666171177557716655555555555555551111111111111111111111116616655777556617716655176777777667777776
76177666666771771566666116666651666117111771166655555665555555551555555555555555555555516516666777666617716655177775577777775577
77177777777771771566666116666651661761151116716655555665555555556111111111111111111111166515666777666517717656177757757777757757
77166666666661771566666116666651661711711511716655555555555555556155511555555555511555166515655777556517717766176575565667575565
77161111111161771566666116666651666117666651166666666666555555556155511111111111111555166551655777556157716765177576665755576665
76161555555161771111111111111111666517666651566655555555777777776511155555555555555111667755115777511577751651575756657575556655
67161656566161671566666666666651666551766515566656565656555555556666666666666666666666667765551111155777775115777555555777555557
77111665666111766111111111111116666655111155666677777777666666666666666666666666666666667776665555577777777777776775577667755776
77711111111117711111177777777777777777777777777111111111177777777777777711111111766666670000000000000000000000000000000000000000
71177777777771177777711111111117777777777777711577777777511777777777777777777777676666750001100000011000000000000000000000000000
17177777777771177777717777777771777777777771175566666666557117777777777766666666667667560017110110171100000000000000000000000000
17166666666661177777716666666651777777777115575566666666557551177777777766666666666775660111111771111110011111110000000000000000
17161111111161166666616666666651777777711575575555555555557557511777777755555555666776660177771771777710011111110000000000000000
17161577555161161111615555555651777771175575575566666666557557557117777766756766667567660017717117177100001111100000000000000000
17161555555161155555515777775651777115575575575566666666557557557551177767566676675666760001171001711000000111000000000000000000
17161577775161165665611766675651711575575575575566666666557557557557511775666667756666670001710000171000000010000000000000000000
17161111111161165665611177775651175575575575575555555555557557557557557177777777557557550001710000171000000000000000000000000000
17165666666561155555515167675651175575575575575566666666557557557557557176666665557557550001171001711000000000000000000000000000
17511111111115511111155177775651175575575575575566666666557557557557557176666665557557550017117117171100000000000000000000000000
17177777777761566175715155555651175575575575575566666666557557557557557177777777557557550111111771111110000000000000000000000000
17155555555551566155511666666651175575575575575566666666557557557557557166657666557557550177771771777710000000000000000000000000
17157757575751566166616666666651175575575575575111111111157557557557557166657666557557550017710110177100000000000000000000000000
17165575757551555511155555555551175575575575511555555555511557557557557177777777557557550001100000011000000000000000000000000000
15111111111111111111111111111111175575575571155111111111111117557557557177666665557557550000000000000000000000000000000000000000
11111111111111111111111111111111175575575115511666666666611551157557557176666177566666665656666666666565771666670000000000000000
15555555555555555555555555555551175575511551166651111115666115511557557176666177777777775611111111111165771666670000000000000000
11111111111111111111111111111111175571155116666617777671666661155117557176666177777777775615555555555165771666670000000000000000
61555511555555555555555511555516175115511666666717776751666666611551157176666177777777775615511111155165771666670000000000000000
61555511111111111111111111555516111551166666677717767561777666666115511176666177666666665715177776715165771666670000000000000000
65111155555555555555555555111166155116666667777717675651777776666661155176666177777777775715177767615165771666670000000000000000
66666666666666666666666666666666711116666777777716756551777777766661111776666177777777775715177676615165771666670000000000000000
66666666666666666666666666666666777716677777777751111115777777777661777776666177777777775715176766615165771666670000000000000000
00000000000000000000000000000000777116665555555555555555555555556661177776666166666666665715511111151165661666670000000000000000
00000000000000000000000000000000777117776666666666666666666666667771177776666177666666665715555555517165771666670000000000000000
00000000000000000000000000000000777117776666666666666666666666667771177776666177777777775715677777761165771666670000000000000000
00000000000000000000000000000000777117776666666666666666666666667771177776666166666666665715766666665165661666670000000000000000
00000000000000000000000000000000777116666666666666606666666066666661177776666165555555555715766666665165561666670000000000000000
00000000000000000000000000000000777111111111111111111111111111111111177776666165555555555715555555555165561666670000000000000000
00000000000000000000000000000000777116665555555555555555555555556666177776666611111111115711111111111165116666670000000000000000
00000000000000000000000000000000777111111111111111111111111111111111177776666666666666661166666666666611666666670000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101000000010101010101010101010101010000000001010101010101010101010101010101000001010101010101010101010101010000
0000010100000101010101010101010100000101000001010101010101010101000001010000000000000101010100010000010100000000000000010101000001010101010101010101010000000000010101010101010101010100000000000000000001010101010101000001000000000000010101010101010000010000
__map__
44454d4d4d4d4d4d4d4d4e4f4d4d4e4f828382834d4d88894d4d86874d4d82838a8a8a8a8a8a8a8a8b8c8b8c8283828382838283abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabac000000000000000000000000000000000000000000000000000000000000000000000000
5455565757584d4d4d4d5e5f4d4d5e5f929392934d4d98994d4d96974d4d92939a9a9a9a9a9a9a9a9b9c9b9ca2a3a2a3a2a3a2a3bbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbc000000000000000000000000000000000000000000000000000000000000000000000000
6465666767694a4a4a4a4a4a4a4a6e6fa2a3a2a34a4a4a4a4a4a4a4a4a4aa2a3c0c1c2c3565757594b4b4b4ba2a3a2a3a2a3a2a3abaca8a88585858585858585858585858585858585858585858585858585858585858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
7475767777794a4a4a4a4a4a4a4a7e7fb2b3b2b34a4a4a4a4a4a4a4a4a4ab2b3d0d1d2d3666767694b4b4b4bb2b3b2b3b2b3b2b3bbbca8a8a9858585a9858585a9858585a9858585a9858585858585858585858585858585a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4ae0e1e2e3b8b9b9ba4b4b4b4b4b4b4b4b4b4b4b4babaca8a885858585c4c5c6c6c6c6c7c88585858585858585c4c5c6c6c6c6c7c885858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bbbbca8a88585a985d4d5d6d6d6d6d7d88585a9858585a985d4d5d6d6d6d6d7d885858585a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4aa0a156575759a0a14a4a4a4a4b4b4b4b4b4b4b4b4b4b4b4b6857575757584b4babaca8a8a9a9a9a9e4e5e6eae6e6e7e885858585a9a9a9a9e4e5e6eae6e6e7e885858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4ab0b194848495b0b14a4a4a4a4b4b4b4b4b4b4b4b4b4b4b4b9484848484954b4bbbbca8a8a9a9a9a9f4f5f5f5f5f5f5f8a9858585a9a9a9a9f4f5f5f5f5f5f5f8a9858585a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a6a6b4a4a4a4a4a4a4a4a4a4a4a4aa0a166676769a0a14a4a4a4a4b4b4b4b4b4b4b4b4b4b4b4bb8b9b9b9b9ba4b4babaca8a8a9a98d8ee9eaebece6e6eaed85858585a9a98d8ee9eaebece6e6eaed85858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a7a7b4a4a4a4a4a4a4a4a4a4a4a4ab0b176777779b0b14a4a4a4a4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bbbbca8a8a9a99d9ef9fafbfcfafafafd8585a985a9a99d9ef9fafbfcfafafafd8585a985a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a6c6d4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4babaca8a88585858585858585858585858585858585858585858585858585858585858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a7c7d4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bbbbca8a8a9858585a9858585a9858585a9858585a9858585a9858585a9858585a9858585a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
42434a4a4a4a4a4a4a4a4a4a40414a4a40414a4a4a4a4a4a4a4a4a4a4a4a404182838283828382834b4b4b4b8283828382838283abaca8a88585858585858585858585858585858585858585858585858585858585858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
52534a4a4a4a4a4a4a4a4a4a50514a4a50514a4a4a4a4a4a4a4a4a4a4a4a5051a2a3a2a3a2a3a2a34b4b4b4ba2a3a2a3a2a3a2a3bbbca8a88585a9858585a9858585a98585858585858585858585a9858585a9858585a985a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
62634a4a4a4a4a4a4a4a4a4a60614a4a60614a4aa6a6a6a64a4a4a4a4a4a6061a2a3a2a3a2a3a2a34b4b4b4ba2a3a2a3a2a3a2a3abaca8a885858585a9a9a9a9a9a9a9a985858585c4c5c9c9c9c9c9c9c9c9c7c885858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
72734a4a4a4a4a4a4a4a4a4a70714a4a70714a4ab6b6b6b64a4a4a4a4a4a7071b2b3b2b3b2b3b2b34b4b4b4bb2b3b2b3b2b3b2b3bbbca8a8a9858585a9a9a9a9a9a9a9a9a9858585d4dacacacacacacacacadad8a9858585a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
828382834d4d4e4f4d4d4e4f4d4d4e4f000000000000000000000000000000004b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4babaca8a885858585adadadadadad8d8e85858585d4dacacacacacacacacadad885858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
929392934d4d5e5f4d4d5e5f4d4d5e5f000000000000000000000000000000004b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bbbbca8a88585a985bdbdbdbdbdbd9d9e8585a985d4d5d6d6d6d6d6d6d6d6d7d88585a985a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
a2a3a2a34a4a6a6b4a4a4a4a4a4a8081000000000000000000000000000000004b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4babaca8a885858585a8a8a8a8a8a8a8a885858585e4e5e6e6e6d9d9e6e6e6e7e885858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
b2b3b2b34a4a7a7b4a4a4a4a4a4a9091000000000000000000000000000000004b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bbbbca8a8a9858585a8aea8aea8aea8aea9858585e9eaeaead9d9d9d9d9d9d9eda9858585a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a000000000000000000000000000000004b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4babaca8a885858585aea8aea8aea8aea885858585e9e6e6e6ebece6e6e6e6e6ed85858585a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a000000000000000000000000000000004b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4bbbbca8a88585a985a8a8a8a8a8a8a8a88585a985f9fafafafbfcfafafafafafd8585a985a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a000000000000000000000000000000004b4b4b4b4b4b4b4ba7a7a7a74b4b4b4b4b4b4b4babaca8a885858585858585858585858585858585a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a000000000000000000000000000000004b4b4b4b4b4b4b4bb7b7b7b74b4b4b4b4b4b4b4bbbbca8a8a9858585a985858585858585a9858585a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4aa0a156a4a559a0a14a4a4a4a000000000000000000000000000000000000000000000000000000000000000000000000abaca8a885858585858585858585858585858585adadadadadad8d8eadadadada9a9a9a9a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4ab0b194b4b595b0b14a4a4a4a000000000000000000000000000000000000000000000000000000000000000000000000bbbca8a88585a9858585a9858585a9858585a985bdbdbdbdbdbd9d9ebdbdbdbda9a9a9a9a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4aa0a166676769a0a14a4a4a4a000000000000000000000000000000000000000000000000000000000000000000000000abaca8a8a8a8a8a88f8f8f8f8f8f8f8fa9a9a9a9a8a8a8a8a8a8a8a8a8a8a9a9a9a9a9a9a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4ab0b176777779b0b14a4a4a4a000000000000000000000000000000000000000000000000000000000000000000000000bbbca8a8a8a8a8a89faaaaaaaaaaaaafa9a9a9a9a8aea8aea8aea8a8a8a8a9a9a9a9a9a9a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a000000000000000000000000000000000000000000000000000000000000000000000000abaca8a8a8a8a8a89faaaaaaaaaaaaafa9a9a9a9aea8aea8aea8a8a8a8a8a9a9a9a9a9a9a8a8abac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a4a000000000000000000000000000000000000000000000000000000000000000000000000bbbca8a8a8a8a8a89faaaaaaaaaaaaafa9a9a9a9a8a8a8a8a8a8a8a8a8a8a9a9a9a9a9a9a8a8bbbc000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4aa6a6a6a64a4a4a4a4a4a4a4a000000000000000000000000000000000000000000000000000000000000000000000000abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabac000000000000000000000000000000000000000000000000000000000000000000000000
4a4a4a4ab6b6b6b64a4a4a4a4a4a4a4a000000000000000000000000000000000000000000000000000000000000000000000000bbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbcbbbc000000000000000000000000000000000000000000000000000000000000000000000000
